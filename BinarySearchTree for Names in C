#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct node {
    char vegName[20];        // The name of the vegetable
    struct node* pLeft;     // Pointer to the left child node
    struct node* pRight;    // Pointer to the right child node
} node_t;

// Function to add a new vegetable to the binary search tree
void binarySearchTree_AddNode(node_t** ppRoot, char vegName[]) {
    if (*ppRoot == NULL) {          // If the tree is empty, create a new node as the root
        *ppRoot = malloc(sizeof(node_t));
        strcpy((*ppRoot)->vegName, vegName);
        (*ppRoot)->pLeft = NULL;
        (*ppRoot)->pRight = NULL;
    } else {                        // If the tree is not empty, add the new vegetable to the appropriate subtree
        int cmpResult = strcmp(vegName, (*ppRoot)->vegName);   // Compare the new vegetable with the current node
        if (cmpResult < 0) {        // If the new vegetable is smaller, add it to the left subtree
            binarySearchTree_AddNode(&(*ppRoot)->pLeft, vegName);
        } else if (cmpResult > 0) { // If the new vegetable is larger, add it to the right subtree
            binarySearchTree_AddNode(&(*ppRoot)->pRight, vegName);
        } else {                    // If the new vegetable is already in the tree, do nothing
            // Vegetable already exists in the tree, do nothing
        }
    }
}

// Function to print the contents of the binary search tree in ascending order
void binarySearchTree_PrintTreeInOrder(node_t* pRoot) {
    if (pRoot != NULL) {                // Traverse the tree in-order recursively
        binarySearchTree_PrintTreeInOrder(pRoot->pLeft);    // Traverse the left subtree
        printf("%s\n", pRoot->vegName);                     // Print the current node
        binarySearchTree_PrintTreeInOrder(pRoot->pRight);   // Traverse the right subtree
    }
}

// Function to delete the entire binary search tree
void binarySearchTree_deleteTree(node_t** ppNode) {
    if (*ppNode != NULL) {              // If the current node is not NULL, recursively delete its children
        binarySearchTree_deleteTree(&(*ppNode)->pLeft);    // Delete the left subtree
        binarySearchTree_deleteTree(&(*ppNode)->pRight);   // Delete the right subtree
        free(*ppNode);                  // Free the current node
        *ppNode = NULL;                 // Set the current node to NULL
    }
}

int main() {
    node_t* pRoot = NULL;               // Create an empty binary search tree

    char inputVegetables[][20] = { "carrot", "broccoli", "kale", "spinach", "asparagus", "tomato", "cucumber" };

    // Add each vegetable to the binary search tree
    for (int i = 0; i < sizeof(inputVegetables) / sizeof(inputVegetables[0]); i++) {
        binarySearchTree_AddNode(&pRoot, inputVegetables[i]);
    }

    // Print the contents of the binary search tree in ascending order
    binarySearchTree_PrintTreeInOrder(pRoot);

    // Delete the entire binary search tree
    binarySearchTree_deleteTree(&pRoot);

    return 0;
}
